version: '3.8'

services:
  app:
    build: .
    command: ["python", "main.py"]
    ports:
      - "8000:8000"  # Metrics server port
    env_file:
      - .env
    environment:
      SYMBOLS: ${SYMBOLS}
      # Core trading bot settings
      DATA_SOURCE: ${DATA_SOURCE}
      USE_SANDBOX: ${USE_SANDBOX}
      STRATEGY_NAME: ${STRATEGY_NAME}
      INITIAL_CAPITAL: ${INITIAL_CAPITAL}
      
      # CCXT Exchange settings
      EXCHANGE_API_KEY: ${EXCHANGE_API_KEY}
      EXCHANGE_API_SECRET: ${EXCHANGE_API_SECRET}
      
      # IBKR Connection settings
      IBKR_HOST: ${IBKR_HOST}
      IBKR_PORT: ${IBKR_PORT}
      IBKR_CLIENT_ID: ${IBKR_CLIENT_ID}
      
      # IBKR Account settings
      IBKR_ACCOUNT_TYPE: ${IBKR_ACCOUNT_TYPE}
      IBKR_ACCOUNT_ID: ${IBKR_ACCOUNT_ID}
      
      # IBKR Market data settings
      IBKR_MARKET_DATA_TYPE: ${IBKR_MARKET_DATA_TYPE}
      
      # IBKR Connection management
      IBKR_CONNECT_TIMEOUT: ${IBKR_CONNECT_TIMEOUT}
      IBKR_READ_TIMEOUT: ${IBKR_READ_TIMEOUT}
      IBKR_AUTO_RECONNECT: ${IBKR_AUTO_RECONNECT}
      IBKR_MAX_RECONNECT_ATTEMPTS: ${IBKR_MAX_RECONNECT_ATTEMPTS}
      IBKR_RECONNECT_DELAY: ${IBKR_RECONNECT_DELAY}
      
      # IBKR Rate limiting
      IBKR_MAX_REQUESTS_PER_SECOND: ${IBKR_MAX_REQUESTS_PER_SECOND}
      IBKR_HISTORICAL_DATA_TIMEOUT: ${IBKR_HISTORICAL_DATA_TIMEOUT}
      
      # IBKR Logging
      IBKR_LOG_LEVEL: ${IBKR_LOG_LEVEL}
      
      # Logging configuration
      USE_JSON_LOGS: ${USE_JSON_LOGS}
      
      # Default timeframe
      TIMEFRAME: ${TIMEFRAME}
      
      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: trading_bot
      DB_USER: trading_user
      DB_PASSWORD: ${DB_PASSWORD:-trading_password}
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:16-alpine
    container_name: trading_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: trading_bot
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-trading_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_bot"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - postgres

  prometheus:
    image: prom/prometheus:latest
    container_name: trading_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    depends_on:
      - postgres-exporter
      - node-exporter

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: trading_postgres_exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://trading_user:${DB_PASSWORD:-trading_password}@postgres:5432/trading_bot?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      postgres:
        condition: service_healthy

  node-exporter:
    image: prom/node-exporter:latest
    container_name: trading_node_exporter
    restart: unless-stopped
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host:ro

  grafana:
    image: grafana/grafana:latest
    container_name: trading_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

volumes:
  postgres_data:
  prometheus_data:
  grafana_data: