"""
Alert system for sending notifications
"""
import smtplib
import requests
from datetime import datetime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Optional, Any, Dict
from utils.logger import setup_logger
import logging

class AlertSystem:
    """Alert system for sending notifications"""

    def __init__(self, config: Any) -> None:
        self.config = config
        self.logger: logging.Logger = logging.getLogger("TradingBot")

    def send_alert(self, message: str, level: str = "info") -> None:
        """
        Send alert according to configuration

        Args:
            message: Message to send
            level: Alert level (info, warning, error)
        """
        try:
            if self.config.enable_email_alerts:
                self._send_email(message, level)

            if self.config.enable_slack_alerts:
                self._send_slack(message, level)

            if self.config.enable_telegram_alerts:
                self._send_telegram(message, level)

            if self.config.enable_discord_alerts:
                self._send_discord(message, level)

            self.logger.info(f"Alert sent: {level} - {message[:50]}...")

        except Exception as e:
            self.logger.error(f"Error sending alert: {e}")

    def _send_email(self, message: str, level: str) -> None:
        """Send email alert"""
        if not all([self.config.smtp_server, self.config.alert_email]):
            return

        try:
            # Create email
            msg = MIMEMultipart()
            msg['From'] = self.config.alert_email
            msg['To'] = self.config.alert_email
            msg['Subject'] = f"Trading Bot Alert - {level.upper()}"

            body = f"""
            Trading Bot Alert
            =================

            Level: {level.upper()}
            Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

            Message:
            {message}

            ---
            Automatically generated by trading bot
            """

            msg.attach(MIMEText(body, 'plain'))

            # Send email
            server = smtplib.SMTP(self.config.smtp_server, self.config.smtp_port)
            server.starttls()
            server.login(self.config.alert_email, self.config.alert_email_password)
            text = msg.as_string()
            server.sendmail(self.config.alert_email, self.config.alert_email, text)
            server.quit()

        except Exception as e:
            self.logger.error(f"Error sending email: {e}")

    def _send_slack(self, message: str, level: str) -> None:
        """Send Slack notification"""
        if not self.config.slack_webhook_url:
            return

        try:
            # Emoji by level
            emoji_map = {
                "info": ":information_source:",
                "warning": ":warning:",
                "error": ":rotating_light:"
            }

            emoji = emoji_map.get(level, ":robot_face:")

            # Use modern Slack blocks format for better presentation
            payload = {
                "text": f"{emoji} Trading Bot Alert",
                "blocks": [
                    {
                        "type": "header",
                        "text": {
                            "type": "plain_text",
                            "text": f"{emoji} Trading Bot Alert"
                        }
                    },
                    {
                        "type": "section",
                        "fields": [
                            {
                                "type": "mrkdwn",
                                "text": f"*Level:*\n{level.upper()}"
                            },
                            {
                                "type": "mrkdwn", 
                                "text": f"*Time:*\n{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                            }
                        ]
                    },
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": f"*Message:*\n{message}"
                        }
                    },
                    {
                        "type": "context",
                        "elements": [
                            {
                                "type": "mrkdwn",
                                "text": "Trading Bot Notification"
                            }
                        ]
                    }
                ]
            }

            response = requests.post(self.config.slack_webhook_url, json=payload)
            response.raise_for_status()

        except Exception as e:
            self.logger.error(f"Error sending Slack notification: {e}")

    def _send_telegram(self, message: str, level: str) -> None:
        """Send Telegram bot notification"""
        if not all([self.config.telegram_bot_token, self.config.telegram_chat_id]):
            return

        try:
            # Emoji by level
            emoji_map = {
                "info": "‚ÑπÔ∏è",
                "warning": "‚ö†Ô∏è",
                "error": "üö®"
            }

            emoji = emoji_map.get(level, "ü§ñ")
            
            formatted_message = f"{emoji} *Trading Bot Alert*\n\n"
            formatted_message += f"*Level:* {level.upper()}\n"
            formatted_message += f"*Time:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            formatted_message += f"*Message:*\n{message}"

            url = f"https://api.telegram.org/bot{self.config.telegram_bot_token}/sendMessage"
            payload = {
                "chat_id": self.config.telegram_chat_id,
                "text": formatted_message,
                "parse_mode": "Markdown"
            }

            response = requests.post(url, json=payload, timeout=10)
            response.raise_for_status()

        except Exception as e:
            self.logger.error(f"Error sending Telegram notification: {e}")

    def _send_discord(self, message: str, level: str) -> None:
        """Send Discord webhook notification"""
        if not self.config.discord_webhook_url:
            return

        try:
            # Emoji by level
            emoji_map = {
                "info": "‚ÑπÔ∏è",
                "warning": "‚ö†Ô∏è", 
                "error": "üö®"
            }

            emoji = emoji_map.get(level, "ü§ñ")
            
            # Discord embed colors
            color_map = {
                "info": 0x3498db,     # Blue
                "warning": 0xf39c12,  # Orange
                "error": 0xe74c3c     # Red
            }

            color = color_map.get(level, 0x95a5a6)  # Gray default

            payload = {
                "embeds": [
                    {
                        "title": f"{emoji} Trading Bot Alert",
                        "description": message,
                        "color": color,
                        "fields": [
                            {
                                "name": "Level",
                                "value": level.upper(),
                                "inline": True
                            },
                            {
                                "name": "Time",
                                "value": datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                                "inline": True
                            }
                        ],
                        "footer": {
                            "text": "Trading Bot Notification"
                        },
                        "timestamp": datetime.now().isoformat()
                    }
                ]
            }

            response = requests.post(self.config.discord_webhook_url, json=payload, timeout=10)
            response.raise_for_status()

        except Exception as e:
            self.logger.error(f"Error sending Discord notification: {e}")